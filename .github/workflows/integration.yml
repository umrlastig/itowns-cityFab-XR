name: integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch: {}

jobs:

  # Build bundle, doc and check linter
  build:
    name: Build bundle, check Linter and generate documentation
    runs-on: ubuntu-latest
    steps:

      # Use specific Node.js version
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.17
          cache: 'npm'

      # Install packages
      - name: Install packages
        run: npm ci

      # Prepare before build
      - name: Prepare
        run: npm run prepare

      # Check linter
      - name: Linter
        run: npm run lint -- --max-warnings=0

      # Build bundle
      - name: Build bundle
        if: ${{ success() }}
        run: npm run build

      # Build documentation
      - name: Build documentation
        if: ${{ success() && github.ref == 'refs/heads/master' }}
        run: npm run doc -- -d buildDocs

      # Prepare archive for deploying
      - name: Archive production artifacts
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
            name: dist-itowns
            path: |
                dist/**/*.js
                examples
                buildDocs

  # Unit and coverage tests
  unit-and-coverage-tests:
    name: Unit and coverage tests
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - package: "@itowns/geographic"
            path: "Geographic"
          - package: "itowns"
            path: "Main"
    steps:

      # Use specific Node.js version
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.17
          cache: 'npm'

      # Install packages
      - name: Install packages
        run: npm ci

      # Transpile
      - name: Transpile packages
        run: npm run transpile

      - name: Test ${{ matrix.package }}
        run: npm run test-with-coverage_lcov --workspace ${{ matrix.package}}
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        with:
          format: lcov
          base-path: ./packages/${{ matrix.path }}
          path-to-lcov: ./packages/${{ matrix.path }}/coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}
          flag-name: run-${{ matrix.package }}
          parallel: true

  # Final Code coverage
  finish-coverage:
    name: finish parallel test unit
    needs: unit-and-coverage-tests
    runs-on: ubuntu-latest
    steps:
    - name: Close parallel build
      uses: coverallsapp/github-action@v2
      with:
        parallel-finished: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
  # Functional tests
  functional-tests:
    name: Functional tests
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Use specific Node.js version
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.17
          cache: 'npm'

      # Install packages
      - name: Install packages
        run: npm ci

      # Download artifact from build
      - name: Download itowns bundle
        uses: actions/download-artifact@v4
        with:
          name: dist-itowns

      - name: Run functional tests
        run: npm run test-functional

  # Deploy on itowns.github.io website
  deploy:
    name: Deploy to itowns.github.io
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [finish-coverage, functional-tests]
    runs-on: ubuntu-latest
    steps:

      # Download artifact from build
      - name: Download itowns bundle
        uses: actions/download-artifact@v4
        with:
          name: dist-itowns

      # Copy files for deployment
      - name: build site
        run: |
          mkdir -p itowns/dist
          mkdir -p itowns/potree/build
          mkdir -p itowns/potree/libs
          cp -R dist/*.js itowns/dist/
          cp -R examples itowns/
          cp -R buildDocs itowns/docs

      # When deploying a release, we copy itowns bundles in dev folder to be published on
      # iTowns/itowns.github.io. This is because we can't publish both a release version
      # (in itowns/ folder) and a @next version (in itowns/dev folder) at the same time.
      - name: add dev bundle if release
        if: ${{ startsWith(github.event.head_commit.message, 'release v' ) }}
        run: |
          cp -R itowns dev
          mv dev itowns/

      # Deploy to itowns.github.io LTS
      - name: Deploy LTS to itowns.github.io
        if: ${{ startsWith(github.event.head_commit.message, 'release v' ) }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # external_repository: umrlastig/itowns-cityFab-XR.github.io
          publish_dir: ./itowns
          destination_dir: ./itowns
          # publish_branch: master
          enable_jekyll: true

      # Deploy to itowns.github.io Dev
      - name: Deploy Dev to itowns.github.io
        # Prevent deploying @next version when a release is done. Doing so would cause an issue,
        # since it is not possible to use the same deploy key to simultaneously deploy two different
        # folders on iTowns/itowns.github.io (the release bundle on previous step and this one.
        if: ${{ !startsWith(github.event.head_commit.message, 'release v' ) }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # external_repository: umrlastig/itowns-cityFab-XR.github.io
          publish_dir: ./itowns
          destination_dir: ./itowns
          # publish_branch: master
          enable_jekyll: true